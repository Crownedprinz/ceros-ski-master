!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=10)}([function(t,e,n){"use strict";var r=n(2),i=n.n(r),o=n(3),s=n.n(o)()(i.a);s.push([t.i,"html, body {\n    margin: 0;\n    padding: 0;\n}","",{version:3,sources:["webpack://./public/css/game.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd",sourcesContent:["html, body {\n    margin: 0;\n    padding: 0;\n}"],sourceRoot:""}]),e.a=s},function(t,e,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),s=[];function a(t){for(var e=-1,n=0;n<s.length;n++)if(s[n].identifier===t){e=n;break}return e}function c(t,e){for(var n={},r=[],i=0;i<t.length;i++){var o=t[i],c=e.base?o[0]+e.base:o[0],u=n[c]||0,h="".concat(c," ").concat(u);n[c]=u+1;var f=a(h),l={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(s[f].references++,s[f].updater(l)):s.push({identifier:h,updater:v(l,e),references:1}),r.push(h)}return r}function u(t){var e=document.createElement("style"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),"function"==typeof t.insert)t.insert(e);else{var s=o(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var h,f=(h=[],function(t,e){return h[t]=e,h.filter(Boolean).join("\n")});function l(t,e,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(t.styleSheet)t.styleSheet.cssText=f(e,i);else{var o=document.createTextNode(i),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function p(t,e,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?t.setAttribute("media",i):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var d=null,y=0;function v(t,e){var n,r,i;if(e.singleton){var o=y++;n=d||(d=u(e)),r=l.bind(null,n,o,!1),i=l.bind(null,n,o,!0)}else n=u(e),r=p.bind(null,n,e),i=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else i()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=c(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var i=a(n[r]);s[i].references--}for(var o=c(t,e),u=0;u<n.length;u++){var h=a(n[u]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}n=o}}}},function(t,e,n){"use strict";function r(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null==n)return;var r,i,o=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(r=n.next()).done)&&(o.push(r.value),!e||o.length!==e);s=!0);}catch(t){a=!0,i=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw i}}return o}(t,e)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return i(t,e)}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var e=r(t,4),n=e[1],i=e[3];if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(s," */"),c=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[n].concat(c).concat([a]).join("\n")}return[n].join("\n")}},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var i={};if(r)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(i[s]=!0)}for(var a=0;a<t.length;a++){var c=[].concat(t[a]);r&&i[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},,,,function(t,e,n){(function(t,e){
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n;!function(n){!function(r){var i="object"==typeof e?e:"object"==typeof self?self:"object"==typeof this?this:Function("return this;")(),o=s(n);function s(t,e){return function(n,r){"function"!=typeof t[n]&&Object.defineProperty(t,n,{configurable:!0,writable:!0,value:r}),e&&e(n,r)}}void 0===i.Reflect?i.Reflect=n:o=s(i.Reflect,o),function(e){var n=Object.prototype.hasOwnProperty,r="function"==typeof Symbol,i=r&&void 0!==Symbol.toPrimitive?Symbol.toPrimitive:"@@toPrimitive",o=r&&void 0!==Symbol.iterator?Symbol.iterator:"@@iterator",s="function"==typeof Object.create,a={__proto__:[]}instanceof Array,c=!s&&!a,u={create:s?function(){return I(Object.create(null))}:a?function(){return I({__proto__:null})}:function(){return I({})},has:c?function(t,e){return n.call(t,e)}:function(t,e){return e in t},get:c?function(t,e){return n.call(t,e)?t[e]:void 0}:function(t,e){return t[e]}},h=Object.getPrototypeOf(Function),f="object"==typeof t&&t.env&&"true"===t.env.REFLECT_METADATA_USE_MAP_POLYFILL,l=f||"function"!=typeof Map||"function"!=typeof Map.prototype.entries?function(){var t={},e=[],n=function(){function t(t,e,n){this._index=0,this._keys=t,this._values=e,this._selector=n}return t.prototype["@@iterator"]=function(){return this},t.prototype[o]=function(){return this},t.prototype.next=function(){var t=this._index;if(t>=0&&t<this._keys.length){var n=this._selector(this._keys[t],this._values[t]);return t+1>=this._keys.length?(this._index=-1,this._keys=e,this._values=e):this._index++,{value:n,done:!1}}return{value:void 0,done:!0}},t.prototype.throw=function(t){throw this._index>=0&&(this._index=-1,this._keys=e,this._values=e),t},t.prototype.return=function(t){return this._index>=0&&(this._index=-1,this._keys=e,this._values=e),{value:t,done:!0}},t}();return function(){function e(){this._keys=[],this._values=[],this._cacheKey=t,this._cacheIndex=-2}return Object.defineProperty(e.prototype,"size",{get:function(){return this._keys.length},enumerable:!0,configurable:!0}),e.prototype.has=function(t){return this._find(t,!1)>=0},e.prototype.get=function(t){var e=this._find(t,!1);return e>=0?this._values[e]:void 0},e.prototype.set=function(t,e){var n=this._find(t,!0);return this._values[n]=e,this},e.prototype.delete=function(e){var n=this._find(e,!1);if(n>=0){for(var r=this._keys.length,i=n+1;i<r;i++)this._keys[i-1]=this._keys[i],this._values[i-1]=this._values[i];return this._keys.length--,this._values.length--,e===this._cacheKey&&(this._cacheKey=t,this._cacheIndex=-2),!0}return!1},e.prototype.clear=function(){this._keys.length=0,this._values.length=0,this._cacheKey=t,this._cacheIndex=-2},e.prototype.keys=function(){return new n(this._keys,this._values,r)},e.prototype.values=function(){return new n(this._keys,this._values,i)},e.prototype.entries=function(){return new n(this._keys,this._values,s)},e.prototype["@@iterator"]=function(){return this.entries()},e.prototype[o]=function(){return this.entries()},e.prototype._find=function(t,e){return this._cacheKey!==t&&(this._cacheIndex=this._keys.indexOf(this._cacheKey=t)),this._cacheIndex<0&&e&&(this._cacheIndex=this._keys.length,this._keys.push(t),this._values.push(void 0)),this._cacheIndex},e}();function r(t,e){return t}function i(t,e){return e}function s(t,e){return[t,e]}}():Map,p=f||"function"!=typeof Set||"function"!=typeof Set.prototype.entries?function(){function t(){this._map=new l}return Object.defineProperty(t.prototype,"size",{get:function(){return this._map.size},enumerable:!0,configurable:!0}),t.prototype.has=function(t){return this._map.has(t)},t.prototype.add=function(t){return this._map.set(t,t),this},t.prototype.delete=function(t){return this._map.delete(t)},t.prototype.clear=function(){this._map.clear()},t.prototype.keys=function(){return this._map.keys()},t.prototype.values=function(){return this._map.values()},t.prototype.entries=function(){return this._map.entries()},t.prototype["@@iterator"]=function(){return this.keys()},t.prototype[o]=function(){return this.keys()},t}():Set,d=new(f||"function"!=typeof WeakMap?function(){var t=u.create(),e=r();return function(){function t(){this._key=r()}return t.prototype.has=function(t){var e=i(t,!1);return void 0!==e&&u.has(e,this._key)},t.prototype.get=function(t){var e=i(t,!1);return void 0!==e?u.get(e,this._key):void 0},t.prototype.set=function(t,e){return i(t,!0)[this._key]=e,this},t.prototype.delete=function(t){var e=i(t,!1);return void 0!==e&&delete e[this._key]},t.prototype.clear=function(){this._key=r()},t}();function r(){var e;do{e="@@WeakMap@@"+s()}while(u.has(t,e));return t[e]=!0,e}function i(t,r){if(!n.call(t,e)){if(!r)return;Object.defineProperty(t,e,{value:u.create()})}return t[e]}function o(t,e){for(var n=0;n<e;++n)t[n]=255*Math.random()|0;return t}function s(){var t,e=(t=16,"function"==typeof Uint8Array?"undefined"!=typeof crypto?crypto.getRandomValues(new Uint8Array(t)):"undefined"!=typeof msCrypto?msCrypto.getRandomValues(new Uint8Array(t)):o(new Uint8Array(t),t):o(new Array(t),t));e[6]=79&e[6]|64,e[8]=191&e[8]|128;for(var n="",r=0;r<16;++r){var i=e[r];4!==r&&6!==r&&8!==r||(n+="-"),i<16&&(n+="0"),n+=i.toString(16).toLowerCase()}return n}}():WeakMap);function y(t,e,n){var r=d.get(t);if(k(r)){if(!n)return;r=new l,d.set(t,r)}var i=r.get(e);if(k(i)){if(!n)return;i=new l,r.set(e,i)}return i}function v(t,e,n){var r=y(e,n,!1);return!k(r)&&!!r.has(t)}function m(t,e,n){var r=y(e,n,!1);if(!k(r))return r.get(t)}function g(t,e,n,r){y(n,r,!0).set(t,e)}function b(t,e){var n=[],r=y(t,e,!1);if(k(r))return n;for(var i=function(t){var e=P(t,o);if(!j(e))throw new TypeError;var n=e.call(t);if(!O(n))throw new TypeError;return n}(r.keys()),s=0;;){var a=D(i);if(!a)return n.length=s,n;var c=a.value;try{n[s]=c}catch(t){try{E(i)}finally{throw t}}s++}}function w(t){if(null===t)return 1;switch(typeof t){case"undefined":return 0;case"boolean":return 2;case"string":return 3;case"symbol":return 4;case"number":return 5;case"object":return null===t?1:6;default:return 6}}function k(t){return void 0===t}function _(t){return null===t}function O(t){return"object"==typeof t?null!==t:"function"==typeof t}function R(t,e){switch(w(t)){case 0:case 1:case 2:case 3:case 4:case 5:return t}var n=3===e?"string":5===e?"number":"default",r=P(t,i);if(void 0!==r){var o=r.call(t,n);if(O(o))throw new TypeError;return o}return function(t,e){if("string"===e){var n=t.toString;if(j(n))if(!O(i=n.call(t)))return i;if(j(r=t.valueOf))if(!O(i=r.call(t)))return i}else{var r;if(j(r=t.valueOf))if(!O(i=r.call(t)))return i;var i,o=t.toString;if(j(o))if(!O(i=o.call(t)))return i}throw new TypeError}(t,"default"===n?"number":n)}function S(t){var e=R(t,3);return"symbol"==typeof e?e:function(t){return""+t}(e)}function x(t){return Array.isArray?Array.isArray(t):t instanceof Object?t instanceof Array:"[object Array]"===Object.prototype.toString.call(t)}function j(t){return"function"==typeof t}function A(t){return"function"==typeof t}function P(t,e){var n=t[e];if(null!=n){if(!j(n))throw new TypeError;return n}}function D(t){var e=t.next();return!e.done&&e}function E(t){var e=t.return;e&&e.call(t)}function T(t){var e=Object.getPrototypeOf(t);if("function"!=typeof t||t===h)return e;if(e!==h)return e;var n=t.prototype,r=n&&Object.getPrototypeOf(n);if(null==r||r===Object.prototype)return e;var i=r.constructor;return"function"!=typeof i||i===t?e:i}function I(t){return t.__=void 0,delete t.__,t}e("decorate",(function(t,e,n,r){if(k(n)){if(!x(t))throw new TypeError;if(!A(e))throw new TypeError;return function(t,e){for(var n=t.length-1;n>=0;--n){var r=(0,t[n])(e);if(!k(r)&&!_(r)){if(!A(r))throw new TypeError;e=r}}return e}(t,e)}if(!x(t))throw new TypeError;if(!O(e))throw new TypeError;if(!O(r)&&!k(r)&&!_(r))throw new TypeError;return _(r)&&(r=void 0),function(t,e,n,r){for(var i=t.length-1;i>=0;--i){var o=(0,t[i])(e,n,r);if(!k(o)&&!_(o)){if(!O(o))throw new TypeError;r=o}}return r}(t,e,n=S(n),r)})),e("metadata",(function(t,e){return function(n,r){if(!O(n))throw new TypeError;if(!k(r)&&!function(t){switch(w(t)){case 3:case 4:return!0;default:return!1}}(r))throw new TypeError;g(t,e,n,r)}})),e("defineMetadata",(function(t,e,n,r){if(!O(n))throw new TypeError;return k(r)||(r=S(r)),g(t,e,n,r)})),e("hasMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return k(n)||(n=S(n)),function t(e,n,r){if(v(e,n,r))return!0;var i=T(n);return!_(i)&&t(e,i,r)}(t,e,n)})),e("hasOwnMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return k(n)||(n=S(n)),v(t,e,n)})),e("getMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return k(n)||(n=S(n)),function t(e,n,r){if(v(e,n,r))return m(e,n,r);var i=T(n);return _(i)?void 0:t(e,i,r)}(t,e,n)})),e("getOwnMetadata",(function(t,e,n){if(!O(e))throw new TypeError;return k(n)||(n=S(n)),m(t,e,n)})),e("getMetadataKeys",(function(t,e){if(!O(t))throw new TypeError;return k(e)||(e=S(e)),function t(e,n){var r=b(e,n),i=T(e);if(null===i)return r;var o=t(i,n);if(o.length<=0)return r;if(r.length<=0)return o;for(var s=new p,a=[],c=0,u=r;c<u.length;c++){var h=u[c];s.has(h)||(s.add(h),a.push(h))}for(var f=0,l=o;f<l.length;f++){h=l[f];s.has(h)||(s.add(h),a.push(h))}return a}(t,e)})),e("getOwnMetadataKeys",(function(t,e){if(!O(t))throw new TypeError;return k(e)||(e=S(e)),b(t,e)})),e("deleteMetadata",(function(t,e,n){if(!O(e))throw new TypeError;k(n)||(n=S(n));var r=y(e,n,!1);if(k(r))return!1;if(!r.delete(t))return!1;if(r.size>0)return!0;var i=d.get(e);return i.delete(n),i.size>0||d.delete(e),!0}))}(o)}()}(n||(n={}))}).call(this,n(8),n(9))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var c,u=[],h=!1,f=-1;function l(){h&&c&&(h=!1,c.length?u=c.concat(u):f=-1,u.length&&p())}function p(){if(!h){var t=a(l);h=!0;for(var e=u.length;e;){for(c=u,u=[];++f<e;)c&&c[f].run();f=-1,e=u.length}c=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new d(t,e)),1!==u.length||h||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";n.r(e);var r,i=n(1),o=n.n(i),s=n(0),a={insert:"head",singleton:!1},c=(o()(s.a,a),s.a.locals,n(7),function(t){this.name=t}),u=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),h=function(t){function e(e){var n,r=t.call(this)||this;return r.name="ServiceNotFoundError",r.normalizedIdentifier="<UNKNOWN_IDENTIFIER>","string"==typeof e?r.normalizedIdentifier=e:e instanceof c?r.normalizedIdentifier="Token<"+(e.name||"UNSET_NAME")+">":e&&(e.name||(null===(n=e.prototype)||void 0===n?void 0:n.name))&&(r.normalizedIdentifier="MaybeConstructable<"+e.name+">"||!1),r}return u(e,t),Object.defineProperty(e.prototype,"message",{get:function(){return'Service with "'+this.normalizedIdentifier+'" identifier was not found in the container. Register it before usage via explicitly calling the "Container.set" function or using the "@Service()" decorator.'},enumerable:!1,configurable:!0}),e}(Error),f=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),l=function(t){function e(e){var n,r=t.call(this)||this;return r.name="CannotInstantiateValueError",r.normalizedIdentifier="<UNKNOWN_IDENTIFIER>","string"==typeof e?r.normalizedIdentifier=e:e instanceof c?r.normalizedIdentifier="Token<"+(e.name||"UNSET_NAME")+">":e&&(e.name||(null===(n=e.prototype)||void 0===n?void 0:n.name))&&(r.normalizedIdentifier="MaybeConstructable<"+e.name+">"||!1),r}return f(e,t),Object.defineProperty(e.prototype,"message",{get:function(){return'Cannot instantiate the requested value for the "'+this.normalizedIdentifier+"\" identifier. The related metadata doesn't contain a factory or a type to instantiate."},enumerable:!1,configurable:!0}),e}(Error),p=Symbol("EMPTY_VALUE"),d=function(){return(d=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},y=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),i=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,i++)r[i]=o[s];return r},v=function(){function t(t){this.services=[],this.id=t}return t.prototype.has=function(t){return!!this.findService(t)},t.prototype.get=function(t){var e=m.of(void 0),n=e.findService(t),r=this.findService(t);if(n&&!0===n.global)return this.getServiceValue(n);if(r)return this.getServiceValue(r);if(n&&this!==e){var i=d({},n);i.value=p,this.set(i);var o=this.getServiceValue(i);return this.set(d(d({},i),{value:o})),o}if(n)return this.getServiceValue(n);throw new h(t)},t.prototype.getMany=function(t){var e=this;return this.findAllServices(t).map((function(t){return e.getServiceValue(t)}))},t.prototype.set=function(t,e){var n=this;if(t instanceof Array)return t.forEach((function(t){return n.set(t)})),this;if("string"==typeof t||t instanceof c)return this.set({id:t,type:null,value:e,factory:void 0,global:!1,multiple:!1,eager:!1,transient:!1});if("function"==typeof t)return this.set({id:t,type:t,value:e,factory:void 0,global:!1,multiple:!1,eager:!1,transient:!1});var r=d({id:new c("UNREACHABLE"),type:null,factory:void 0,value:p,global:!1,multiple:!1,eager:!1,transient:!1},t),i=this.findService(r.id);return i&&!0!==i.multiple?Object.assign(i,r):this.services.push(r),r.eager&&this.get(r.id),this},t.prototype.remove=function(t){var e=this;return Array.isArray(t)?t.forEach((function(t){return e.remove(t)})):this.services=this.services.filter((function(n){return n.id!==t||(e.destroyServiceInstance(n),!1)})),this},t.prototype.reset=function(t){var e=this;switch(void 0===t&&(t={strategy:"resetValue"}),t.strategy){case"resetValue":this.services.forEach((function(t){return e.destroyServiceInstance(t)}));break;case"resetServices":this.services.forEach((function(t){return e.destroyServiceInstance(t)})),this.services=[];break;default:throw new Error("Received invalid reset strategy.")}return this},t.prototype.findAllServices=function(t){return this.services.filter((function(e){return e.id===t}))},t.prototype.findService=function(t){return this.services.find((function(e){return e.id===t}))},t.prototype.getServiceValue=function(t){var e,n=p;if(t.value!==p)return t.value;if(!t.factory&&!t.type)throw new l(t.id);if(t.factory)if(t.factory instanceof Array){var r=void 0;try{r=this.get(t.factory[0])}catch(e){if(!(e instanceof h))throw e;r=new t.factory[0]}n=r[t.factory[1]](this,t.id)}else n=t.factory(this,t.id);if(!t.factory&&t.type){var i=t.type,o=(null===(e=Reflect)||void 0===e?void 0:e.getMetadata("design:paramtypes",i))||[],s=this.initializeParams(i,o);s.push(this),n=new(i.bind.apply(i,y([void 0],s)))}if(t.transient||n===p||(t.value=n),n===p)throw new l(t.id);return t.type&&this.applyPropertyHandlers(t.type,n),n},t.prototype.initializeParams=function(t,e){var n=this;return e.map((function(e,r){var i=m.handlers.find((function(e){return(e.object===t||e.object===Object.getPrototypeOf(t))&&e.index===r}));return i?i.value(n):e&&e.name&&!n.isPrimitiveParamType(e.name)?n.get(e):void 0}))},t.prototype.isPrimitiveParamType=function(t){return["string","boolean","number","object"].includes(t.toLowerCase())},t.prototype.applyPropertyHandlers=function(t,e){var n=this;m.handlers.forEach((function(r){"number"!=typeof r.index&&(r.object.constructor===t||t.prototype instanceof r.object.constructor)&&r.propertyName&&(e[r.propertyName]=r.value(n))}))},t.prototype.destroyServiceInstance=function(t,e){if(void 0===e&&(e=!1),e||!!t.type||!!t.factory){if("function"==typeof(null==t?void 0:t.value).destroy)try{t.value.destroy()}catch(t){}t.value=p}},t}(),m=function(){function t(){}return t.of=function(t){if(void 0===t&&(t="default"),"default"===t)return this.globalInstance;var e=this.instances.find((function(e){return e.id===t}));return e||(e=new v(t),this.instances.push(e)),e},t.has=function(t){return this.globalInstance.has(t)},t.get=function(t){return this.globalInstance.get(t)},t.getMany=function(t){return this.globalInstance.getMany(t)},t.set=function(t,e){return this.globalInstance.set(t,e),this},t.remove=function(t){return this.globalInstance.remove(t),this},t.reset=function(t){if(void 0===t&&(t="default"),"default"==t)this.globalInstance.reset(),this.instances.forEach((function(t){return t.reset()}));else{var e=this.instances.find((function(e){return e.id===t}));e&&(e.reset(),this.instances.splice(this.instances.indexOf(e),1))}return this},t.registerHandler=function(t){return this.handlers.push(t),this},t.import=function(t){return this},t.handlers=[],t.globalInstance=new v("default"),t.instances=[],t}(),g=m;function b(t){return function(e){var n={id:e,type:e,factory:void 0,multiple:!1,global:!1,eager:!1,transient:!1,value:p};t instanceof c||"string"==typeof t?n.id=t:t&&(n.id=t.id||e,n.factory=t.factory||void 0,n.multiple=t.multiple||!1,n.global=t.global||!1,n.eager=t.eager||!1,n.transient=t.transient||!1),m.set(n)}}var w=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},k=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},_=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};let O=class{constructor(){this.loadedAssets=[]}loadAssets(t){return _(this,void 0,void 0,(function*(){const e=[];for(const[n,r]of Object.entries(t)){const t=this.loadSingleAsset(r,n);e.push(t)}yield Promise.all(e)}))}loadSingleAsset(t,e){return new Promise(n=>{const r=new Image;r.onload=()=>{r.width/=2,r.height/=2,this.loadedAssets[e]=r,n()},r.src=t})}getAsset(t){return this.loadedAssets[t]}};O=w([b(),k("design:paramtypes",[])],O);var R=O;const S=window.innerWidth,x=window.innerHeight,j={skierCrash:"public/img/skier_crash.png",skierLeft:"public/img/skier_left.png",skierLeftDown:"public/img/skier_left_down.png",skierDown:"public/img/skier_down.png",skierRightDown:"public/img/skier_right_down.png",skierRight:"public/img/skier_right.png",tree:"public/img/tree_1.png",treeCluster:"public/img/tree_cluster.png",rock1:"public/img/rock_1.png",rock2:"public/img/rock_2.png",skierUp:"public/img/skier_jump_1.png",jumpRamp:"public/img/jump_ramp.png",rhinoRunLeft:"public/img/rhino_run_left.png",rhinoLift:"public/img/rhino_lift.png",rhinoLiftMouthOpen:"public/img/rhino_lift_mouth_open.png",rhinoLiftEat1:"public/img/rhino_lift_eat_1.png",rhinoLiftEat2:"public/img/rhino_lift_eat_2.png",rhinoLiftEat3:"public/img/rhino_lift_eat_3.png",killSkier:"public/img/clear_skier.png"},A=0,P=1,D=2,E=3,T=4,I=5,M=6,L=7,C=8,N={[A]:"skierCrash",[P]:"skierLeft",[D]:"skierLeftDown",[E]:"skierDown",[T]:"skierRightDown",[I]:"skierRight",[M]:"skierUp",[L]:"killSkier",[C]:"skierCrash"},U=37,W=39,z=38,K=40,G=32,V=82,F=0,H=1,B=2,J=3,q=4,Y=5,$={[F]:"rhinoRunLeft",[H]:"rhinoLift",[B]:"rhinoLiftMouthOpen",[J]:"rhinoLiftEat1",[q]:"rhinoLiftEat2",[Y]:"rhinoLiftEat3"};function Q(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t+1))+t}function X(t,e){return!(e.left>t.right||e.right<t.left||e.top>t.bottom||e.bottom<t.top)}class Z{constructor(t,e,n,r){this.left=0,this.top=0,this.right=0,this.bottom=0,this.left=t,this.top=e,this.right=n,this.bottom=r}}const tt=["tree","treeCluster","rock1","rock2","jumpRamp"];class et extends class{constructor(t,e){this.x=0,this.y=0,this.assetName="",this.x=t,this.y=e}getAssetName(){return this.assetName}getPosition(){return{x:this.x,y:this.y}}draw(t,e){const n=e.getAsset(this.assetName),r=this.x-n.width/2,i=this.y-n.height/2;t.drawImage(n,r,i,n.width,n.height)}}{constructor(t,e){super(t,e);const n=Q(0,tt.length-1);this.assetName=tt[n]}}var nt=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},rt=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let it=class{constructor(){this.obstacles=[]}restartObstacle(){this.obstacles=[]}getObstacles(){return this.obstacles}drawObstacles(t,e){this.obstacles.forEach(n=>{n.draw(t,e)})}placeInitialObstacles(){const t=Math.ceil(S/300*(x/300)),e=-S/2,n=S/2,r=x/2;for(let i=0;i<t;i++)this.placeRandomObstacle(e,n,100,r);this.obstacles.sort((t,e)=>t.getPosition().y-e.getPosition().y)}placeNewObstacle(t,e){8===Q(1,8)&&(t.left<e.left?this.placeObstacleLeft(t):t.left>e.left&&this.placeObstacleRight(t),t.top<e.top?this.placeObstacleTop(t):t.top>e.top&&this.placeObstacleBottom(t))}placeObstacleLeft(t){this.placeRandomObstacle(t.left,t.left,t.top,t.bottom)}placeObstacleRight(t){this.placeRandomObstacle(t.right,t.right,t.top,t.bottom)}placeObstacleTop(t){this.placeRandomObstacle(t.left,t.right,t.top,t.top)}placeObstacleBottom(t){this.placeRandomObstacle(t.left,t.right,t.bottom,t.bottom)}placeRandomObstacle(t,e,n,r){const i=this.calculateOpenPosition(t,e,n,r),o=new et(i.x,i.y);this.obstacles.push(o)}calculateOpenPosition(t,e,n,r){const i=Q(t,e),o=Q(n,r);return this.obstacles.find(t=>i>t.x-50&&i<t.x+50&&o>t.y-50&&o<t.y+50)?this.calculateOpenPosition(t,e,n,r):{x:i,y:o}}};it=nt([b(),rt("design:paramtypes",[])],it);var ot=it,st=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},at=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let ct=class{constructor(t,e){this.x=0,this.y=0,this.width=0,this.height=0,this.drawOffset={x:0,y:0},this.ctx=null,this.width=t,this.height=e,this.createCanvas()}restartCanvas(){this.x=0,this.y=0,this.width=0,this.height=0,this.drawOffset={x:0,y:0},this.ctx=null,this.width=S,this.height=x}createCanvas(){const t=document.createElement("canvas");t.id="skiCanvas",t.width=this.width*window.devicePixelRatio,t.height=this.height*window.devicePixelRatio,t.style.width=this.width+"px",t.style.height=this.height+"px",this.ctx=t.getContext("2d"),this.ctx.scale(window.devicePixelRatio,window.devicePixelRatio),document.body.appendChild(t)}clearCanvas(){this.ctx.clearRect(this.x,this.y,this.width,this.height)}setDrawOffset(t,e){this.drawOffset.x=t,this.drawOffset.y=e}drawImage(t,e,n,r,i){e-=this.drawOffset.x,n-=this.drawOffset.y,this.ctx.drawImage(t,e,n,r,i)}drawText(t,e,n,r,i){this.ctx.font=t,this.ctx.fillStyle=e,this.ctx.fillText(n,r,i)}};ct=st([b(),at("design:paramtypes",[Number,Number])],ct);var ut=ct,ht=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},ft=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let lt=class{constructor(t,e){this.x=0,this.y=0,this.assetName="",this.x=t,this.y=e}getAssetName(){return this.assetName}getPosition(){return{x:this.x,y:this.y}}draw(t,e){const n=e.getAsset(this.assetName),r=this.x-n.width/2,i=this.y-n.height/2;t.drawImage(n,r,i,n.width,n.height)}};lt=ht([b(),ft("design:paramtypes",[Number,Number])],lt);var pt=lt,dt=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},yt=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let vt=class extends pt{constructor(t,e){super(t,e),this.assetName="skierDown",this.isPaused=!1,this.direction=E,this.lastDirection=this.direction,this.speed=10,this.isCrashed=!1}restartSkier(){this.assetName="skierDown",this.isPaused=!1,this.direction=E,this.lastDirection=this.direction,this.speed=10,this.x=0,this.y=0}setDirection(t){this.direction=t,this.updateAsset()}setLastDirection(t){this.lastDirection=t}updateAsset(){this.assetName=N[this.direction]}move(){switch(this.direction){case D:this.moveSkierLeftDown();break;case E:this.moveSkierDown();break;case T:this.moveSkierRightDown();break;case P:this.moveSkierLeft();break;case I:this.moveSkierRight();break;case M:this.moveSkierUp()}}moveSkierLeft(){this.x-=10}moveSkierLeftDown(){this.x-=this.speed/1.4142,this.y+=this.speed/1.4142}moveSkierDown(){this.y+=this.speed}moveSkierRightDown(){this.x+=this.speed/1.4142,this.y+=this.speed/1.4142}moveSkierRight(){this.x+=10}moveSkierUp(){this.y+=this.speed}turnLeft(){this.setDirection(P),this.updateLastDirection(),this.updateCrashedStatus()}turnRight(){this.setDirection(I),this.updateLastDirection(),this.updateCrashedStatus()}turnUp(){this.setDirection(M),this.updateLastDirection(),this.updateCrashedStatus()}touchMovement(t,e){this.x=t,this.y=e}turnDown(){this.setDirection(E),this.updateLastDirection(),this.updateCrashedStatus()}turnLeftDown(){this.setDirection(D),this.updateLastDirection(),this.updateCrashedStatus()}turnRightDown(){this.setDirection(T),this.updateLastDirection(),this.updateCrashedStatus()}updateCrashedStatus(){this.direction!=A&&(this.isCrashed=!1)}pause(){this.isPaused?(this.setDirection(this.lastDirection),this.isPaused=!1):(this.isPaused=!0,this.setDirection(C))}updateLastDirection(){this.setLastDirection(this.direction)}setSkierJumpOverRock(t){if(this.direction===M&&("rock1"===t||"rock2"===t))return!0}makeSkierJumpIfHitRamp(t){if("jumpRamp"===t)return this.turnUp(),!0}CheckIfSkierShouldJump(t){return this.setSkierJumpOverRock(t)||this.makeSkierJumpIfHitRamp(t)}checkIfSkierHitObstacle(t,e){const n=e.getAsset(this.assetName),r=new Z(this.x-n.width/2,this.y-n.height/2,this.x+n.width/2,this.y-n.height/4);t.getObstacles().find(t=>{const n=t.getAssetName(),i=e.getAsset(n),o=t.getPosition(),s=new Z(o.x-i.width/2,o.y-i.height/2,o.x+i.width/2,o.y),a=X(r,s);return(!a||!this.CheckIfSkierShouldJump(n))&&a})&&(this.isCrashed=!0,this.setDirection(A))}};vt=dt([b(),yt("design:paramtypes",[Number,Number])],vt);var mt=vt,gt=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},bt=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let wt=class extends pt{constructor(t,e){super(t,e),this.assetName="rhinoRunLeft",this.action=F}restartRhino(){this.assetName="rhinoRunLeft",this.action=F,this.x=0,this.y=0}drawRhino(t,e){this.y>=3e3&&this.draw(t,e)}move(t){if(t.y>=3e3&&this.action===F)switch(this.y=t.y,t.direction){case E:this.moveDown(t.y);break;case P:this.moveLeft(t.speed);break;case I:this.moveRight(t.speed);break;case M:this.moveUp(t.y);break;case A:this.moveDown(t.y)}}moveLeft(t){this.x+=t}moveRight(t){this.x+=2*t}moveUp(t){this.x=t-6e3}moveDown(t){this.x=t-6e3}endIfRhinoCatchSkier(t,e,n,r){if(this.action===F){const i=t.getAsset(this.assetName),o=new Z(this.x-i.width/2,this.y-i.height/2,this.x+i.width/2,this.y-i.height/4),s=t.getAsset(e.assetName);X(o,new Z(e.x-s.width/2,e.y-s.height/2,e.x+s.width/2,e.y-s.height/4))&&(r.stop(),n.play(),this.removeSkier(e),this.setAction(H))}}removeSkier(t){t.isCrashed=!0,t.direction=L,t.y=this.y,t.x=this.x,t.assetName="killSkier"}setAction(t){this.action=t,this.updateAsset()}updateAsset(){this.assetName=$[this.action]}updateAction(t){if(this.action)switch(this.removeSkier(t),this.action){case H:this.changeAction(B);break;case B:this.changeAction(J);break;case J:this.changeAction(q);break;case q:this.changeAction(Y)}}changeAction(t){var e=this;setTimeout((function(){e.setAction(t)}),700)}};wt=gt([b(),bt("design:paramtypes",[Number,Number])],wt);var kt=wt,_t=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},Ot=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let Rt=class{constructor(t,e){this.score=0,this.x=t,this.y=e}resetScore(){this.score=0,this.x=0,this.y=0}updateScore(t){t.isPaused||t.isCrashed||(this.score+=1)}drawScore(t){t.drawText("30px Consolas","Red","Score: "+this.score,100,40)}};Rt=_t([b(),Ot("design:paramtypes",[Number,Number])],Rt);var St=Rt,xt=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},jt=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};let At=class{constructor(t){this.sound=document.createElement("audio"),this.sound.src=t,this.sound.setAttribute("preload","auto"),this.sound.setAttribute("controls","none"),this.sound.style.display="none",document.body.appendChild(this.sound)}play(){this.sound.play()}stop(){this.sound.pause()}};At=xt([b(),jt("design:paramtypes",[String])],At);var Pt=At,Dt=function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s},Et=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},Tt=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))};let It=class{constructor(t,e,n,r,i,o,s){this.assetManager=t,this.obstacleService=e,this.skier=n,this.canvas=r,this.rhino=i,this.score=o,this.sound=s,this.gameWindow=new Z(0,0,0,0),this.keys=[],this.skier=new mt(0,0),this.canvas=new ut(S,x),this.rhino=new kt(0,0),this.score=new St(0,0),this.sound=new Pt("public/sounds/failing.wav"),this.bkMusic=new Pt("public/sounds/background.mp3"),document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyDown.bind(this)),this.startBackGroundMusic()}init(){this.obstacleService.placeInitialObstacles()}load(){return Tt(this,void 0,void 0,(function*(){yield this.assetManager.loadAssets(j)}))}run(){this.canvas.clearCanvas(),this.updateGameWindow(),this.drawGameWindow(),requestAnimationFrame(this.run.bind(this))}updateGameWindow(){this.skier.move();const t=this.gameWindow;this.calculateGameWindow(),this.obstacleService.placeNewObstacle(this.gameWindow,t),this.skier.checkIfSkierHitObstacle(this.obstacleService,this.assetManager),this.score.updateScore(this.skier),this.rhino.move(this.skier),this.rhino.endIfRhinoCatchSkier(this.assetManager,this.skier,this.sound,this.bkMusic),this.rhino.updateAction(this.skier)}resetGame(){this.skier.restartSkier(),this.rhino.restartRhino(),this.obstacleService.restartObstacle(),this.score.resetScore()}drawGameWindow(){this.canvas.setDrawOffset(this.gameWindow.left,this.gameWindow.top),this.score.drawScore(this.canvas),this.skier.draw(this.canvas,this.assetManager),this.obstacleService.drawObstacles(this.canvas,this.assetManager),this.rhino.drawRhino(this.canvas,this.assetManager)}calculateGameWindow(){const t=this.skier.getPosition(),e=t.x-S/2,n=t.y-x/2;this.gameWindow=new Z(e,n,e+S,n+x)}startBackGroundMusic(){this.bkMusic.play()}stopBackGroundMusic(){this.bkMusic.stop()}handleKeyDown(t){"keyup"===t.type&&(this.keys[t.which]="keydown"==t.type),"keydown"===t.type&&(this.keys=this.keys||[],this.keys[t.which]="keydown"==t.type),this.keys&&(this.keys[U]&&(this.skier.turnLeft(),t.preventDefault()),this.keys[W]&&(this.skier.turnRight(),t.preventDefault()),this.keys[z]&&(this.skier.turnUp(),t.preventDefault()),this.keys[K]&&(this.skier.turnDown(),t.preventDefault()),this.keys[G]&&(this.skier.pause(),t.preventDefault()),this.keys[V]&&(this.resetGame(),t.preventDefault()),this.keys[K]&&this.keys[W]&&(this.skier.turnRightDown(),t.preventDefault()),this.keys[K]&&this.keys[U]&&(this.skier.turnLeftDown(),t.preventDefault()))}};It=Dt([b(),Et("design:paramtypes",[R,ot,mt,ut,kt,St,Pt])],It);var Mt=It;(function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{c(r.next(t))}catch(t){o(t)}}function a(t){try{c(r.throw(t))}catch(t){o(t)}}function c(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((r=r.apply(t,e||[])).next())}))})(void 0,void 0,void 0,(function*(){const t=g.get(Mt);t.load().then(()=>{t.init(),t.run()}),console.log("Game started")})).catch(t=>{console.error(t)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,